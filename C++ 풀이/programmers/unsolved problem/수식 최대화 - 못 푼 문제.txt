#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <cctype>
#include <cmath>
#include <algorithm>

using namespace std;

bool operator3[3] = {0,0,0}; // + - *;
queue<long long> num;
queue<char> oper;

long long maxNum;
string operCombi;
int operCnt;


void calNum(){
    
    queue<long long> tmpNum(num);
    queue<char> tmpOper(oper);
    
    int i,j;
        
    for(i=0; i<operCombi.length(); i++){
        
        int size = tmpOper.size();
        
        for(j=0; j<size; j++){
             if(operCombi[i] == tmpOper.front()){
               long long n1,n2,res; 
                 
               n1 =  tmpNum.front();
                tmpNum.pop();
                 
               n2 =  tmpNum.front();
                tmpNum.pop();  
               cout << n1 << ' ' << n2 << '\n';
                 
               if(operCombi[i] == '+') {res = n1+n2;}
               else if(operCombi[i] == '-') {res = n1-n2;}
               else if(operCombi[i] == '*') {res = n1*n2;} 
                 
              tmpNum.push(res);    
              tmpOper.pop();
              
                 
              if(tmpOper.size() != 1){
              tmpOper.push(tmpOper.front());            
              tmpOper.pop();
              }
             
                    
             }
            else{
                tmpNum.push(tmpNum.front());
                tmpNum.pop();  
                
                tmpOper.push(tmpOper.front());    
                tmpOper.pop();        
            }
         }    
        
    }
    
    long long calNum = abs(tmpNum.front()); 
    cout << calNum << '\n';
    maxNum = max(calNum,maxNum); 
    
}



void DFS(int depth){
    
    
    if(depth>=operCnt){
        calNum();
        return;
    }
    
    int i;
    
    for(i=0; i<3; i++){
        
        if(!operator3[i]) {continue;}
        
        operator3[i] = 0;
        
        if(i==0)  operCombi.push_back('+');
        else if(i==1)  operCombi.push_back('-');
        else if(i==2)  operCombi.push_back('*');

        
        DFS(depth+1);
        
        operator3[i] = 1;
        operCombi.pop_back();
        
        
    }
    
    
}

long long solution(string expression) {
    
    maxNum = 0;
    operCombi = "";
    operCnt = 0;
    
    int i;
    long long sum=0;
    
    for(i=0; i<expression.length(); i++){
        
        if(isdigit(expression[i])){
            sum = sum*10 + (expression[i]-'0');  
        }
        else{
            
            num.push(sum);
            sum = 0;
            
           if(expression[i] == '+') operator3[0]=1;
           else if(expression[i] == '-') operator3[1]=1;
           else if(expression[i] == '*') operator3[2]=1;
         
           oper.push(expression[i]);
        }
    }
    
     num.push(sum);
    
    for(i=0; i<3; i++){
        if(operator3[i]) operCnt++;
    }
      
    
    DFS(0);
      
    return maxNum;
}