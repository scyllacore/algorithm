#include <string>
#include <vector>
#include <iostream>

using namespace std;

    
vector<string> answer;
vector<vector<int>> guest;
vector<char> menu;

int maxDepth;
char combi[11];
int maxMenu[11];

void DFS1(int start,int depth){
    
    int i,j;
    
    if(depth >= maxDepth){      
               
        int orderSum;
        int minVal=11;
        
        for(i=0; i<depth; i++){
            orderSum=0;
            for(j=0; j<guest.size(); j++){
            orderSum += guest[j][combi[i]-65];
            }
            if(orderSum<2) return;    
            minVal = min(minVal,orderSum);
                        
        } 
        
        maxMenu[depth] = max(minVal,maxMenu[depth]);
        
        return;       
    }
    
    for(i=start; i<menu.size(); i++){
        combi[depth] = menu[i];
        DFS1(i+1,depth+1);
    }
        
}

void DFS2(int start,int depth){
    
    int i,j;
    
    if(depth >= maxDepth){      
        
        /*
        for(i=0; i<depth; i++){
            cout << combi[i] << ' ';
        }
        cout << '\n';
        */
        
        int orderSum;

        for(i=0; i<depth; i++){
            orderSum=0;
            for(j=0; j<guest.size(); j++){
            orderSum += guest[j][combi[i]-65];
            }
            //cout << orderSum<< ' ';
            if(orderSum!=maxMenu[depth]) return;                              
        }

        
        string tmp;
        
        for(i=0; i<depth; i++){
            tmp += combi[i];
        }
        
        answer.push_back(tmp);        
        return;       
    }
    
    for(i=start; i<menu.size(); i++){
        combi[depth] = menu[i];
        DFS2(i+1,depth+1);
    }
        
}


vector<string> solution(vector<string> orders, vector<int> course) {
    
   guest.assign(orders.size(),vector<int>(26,0)); 
   fill_n(maxMenu,10,0);
    
    int i,j;
    bool menuCheck[26]={0};
    
    for(i=0; i<orders.size(); i++){
        for(j=0; j<orders[i].size(); j++){
            guest[i][orders[i][j]-65]++;
            menuCheck[orders[i][j]-65] = 1;
        }
    }
    
     for(i=0; i<guest.size(); i++){
        for(j=0; j<26; j++){
            //cout << guest[i][j] << ' ';
        }
         //cout << '\n';
    }
    
    
    for(i=0; i<26; i++){
        if(menuCheck[i]) menu.push_back(i+65);
    }
    
    /*for(i=0; i<menu.size(); i++){
        cout << menu[i] << ' ';
    }*/
    

    for(i=2; i<=menu.size(); i++){
        maxDepth = i;
        DFS1(0,0);
    }
    
    for(i=0; i<11;i++){
        cout << maxMenu[i] << ' ';
    }
    
    for(i=2; i<=menu.size(); i++){
        maxDepth = i;
        DFS2(0,0);
    }
    
    return answer;
}